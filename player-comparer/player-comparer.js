// Generated by CoffeeScript 1.7.1
var Graph, appPushState, getURLParameter, init, initDataDropdown, load, playerNameMatcher, reRender, transformPercent, transformPlayerData, transformSalary, untransformPlayerData, updatePlayerEvent;

window.ocua_spreadsheet_url;

window.spreadsheetData;

window.playerNames;

window.onload = function() {
  window.ocua_spreadsheet_url = 'https://docs.google.com/spreadsheets/d/1dxxBgpZ_T5QdLxb6OvY9pH2xuUyNpM8yr5ncUjiGHqQ/pubhtml';
  window.graph = new Graph();
  return load();
};

load = function() {
  return Tabletop.init({
    key: window.ocua_spreadsheet_url,
    callback: init,
    simpleSheet: false
  });
};

init = function(data, tabletop) {
  var setName;
  window.spreadsheetData = data;
  setName = getURLParameter('set') || _.last(_.keys(window.spreadsheetData));
  window.playerNames = _.pluck(window.spreadsheetData[setName].elements, 'playersname');
  $("div#app > div#loading").hide();
  $("div#app > div#loaded").show();
  initDataDropdown();
  $('#dataDropdown #btn-text').text(setName);
  return reRender();
};

initDataDropdown = function() {
  var dataSetNames, li, name, node, _i, _len;
  node = $('#dataDropdown > ul.dropdown-menu');
  dataSetNames = _.keys(window.spreadsheetData);
  for (_i = 0, _len = dataSetNames.length; _i < _len; _i++) {
    name = dataSetNames[_i];
    li = "<li><a href='#'>" + name + "</a></li>";
    node.append(li);
  }
  return $("#dataDropdown li a").click(function(event) {
    var setName;
    setName = $(event.target).text().trim();
    $('#dataDropdown #btn-text').text(setName);
    reRender();
    return event.preventDefault();
  });
};

reRender = function() {
  var playerA, playerAData, playerAName, playerB, playerBData, playerBName, setName;
  setName = $('#dataDropdown #btn-text').text();
  playerAName = getURLParameter('playerA') || 'Male Average';
  playerBName = getURLParameter('playerB') || 'Female Average';
  playerAData = _.find(window.spreadsheetData[setName].elements, function(player) {
    return player.playersname === playerAName;
  });
  playerBData = _.find(window.spreadsheetData[setName].elements, function(player) {
    return player.playersname === playerBName;
  });
  playerA = {
    name: playerAData.playersname,
    stats: transformPlayerData(playerAData)
  };
  playerB = {
    name: playerBData.playersname,
    stats: transformPlayerData(playerBData)
  };
  window.graph.graphPlayers(playerA, playerB);
  appPushState(setName, playerA, playerB);
  $('input#playerA').typeahead('val', playerA.name);
  return $('input#playerB').typeahead('val', playerB.name);
};

getURLParameter = function(name) {
  var key, query, raw_vars, v, val, _i, _len, _ref;
  query = window.location.search.substring(1);
  raw_vars = query.split("&");
  for (_i = 0, _len = raw_vars.length; _i < _len; _i++) {
    v = raw_vars[_i];
    _ref = v.split("="), key = _ref[0], val = _ref[1];
    if (key === name) {
      return decodeURIComponent(val);
    }
  }
};

playerNameMatcher = function() {
  var findMatches;
  return findMatches = function(q, cb) {
    var matches, name, substrRegex, _i, _len, _ref;
    matches = [];
    substrRegex = new RegExp(q, "i");
    _ref = window.playerNames;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      if (substrRegex.test(name)) {
        matches.push({
          value: name
        });
      }
    }
    cb(matches);
  };
};

$("input.typeahead").on("focus", function(event) {
  return $(event.target).val('');
});

$('input.typeahead').typeahead({
  hint: true,
  highlight: true,
  minLength: 1
}, {
  name: 'players',
  displayKey: 'value',
  source: playerNameMatcher()
});

$("input.typeahead").on("typeahead:closed", function(event) {
  return updatePlayerEvent(event);
});

$("input.typeahead").on("blur", function(event) {
  return updatePlayerEvent(event);
});

updatePlayerEvent = function(event) {
  var playerA, playerAData, playerAName, playerB, playerBData, playerBName, setName;
  setName = $('#dataDropdown #btn-text').text();
  playerAName = $("input#playerA").val();
  playerAData = _.find(window.spreadsheetData[setName].elements, function(player) {
    return player.playersname === playerAName;
  });
  playerBName = $("input#playerB").val();
  playerBData = _.find(window.spreadsheetData[setName].elements, function(player) {
    return player.playersname === playerBName;
  });
  if (playerAData && playerBData) {
    playerA = {
      name: playerAName,
      stats: transformPlayerData(playerAData)
    };
    playerB = {
      name: playerBName,
      stats: transformPlayerData(playerBData)
    };
    appPushState(setName, playerA, playerB);
    return window.graph.graphPlayers(playerA, playerB);
  }
};

appPushState = function(setName, playerA, playerB) {
  var url;
  url = window.location.protocol;
  url += "//";
  url += window.location.host;
  url += window.location.pathname;
  url += "?set=" + setName + "&playerA=" + playerA.name + "&playerB=" + playerB.name;
  return history.pushState(null, '', url);
};

transformPercent = function(str) {
  return str.substring(0, str.length - 1) / 10.0;
};

transformSalary = function(str) {
  return str.replace(/\D/g, '') / 50000.0;
};

transformPlayerData = function(data) {
  return [
    {
      name: "G",
      value: +data.g
    }, {
      name: "A",
      value: +data.a
    }, {
      name: "2A",
      value: +data.a_2
    }, {
      name: "3A",
      value: +data.a_3
    }, {
      name: "4A",
      value: +data.a_4
    }, {
      name: "5A",
      value: +data.a_5
    }, {
      name: "D",
      value: +data.d
    }, {
      name: "Comp.",
      value: +data['comp.']
    }, {
      name: "TA",
      value: +data.ta
    }, {
      name: "TD",
      value: +data.threwdrop
    }, {
      name: "Throwing %",
      value: transformPercent(data.throwing)
    }, {
      name: "Catch",
      value: +data["catch"]
    }, {
      name: "Drop",
      value: +data.drop
    }, {
      name: "Catching %",
      value: transformPercent(data.catching)
    }, {
      name: "PF",
      value: +data.pointsfor
    }, {
      name: "PA",
      value: +data.pointsagainst
    }, {
      name: "Salary",
      value: transformSalary(data.previoussalary)
    }, {
      name: "New Salary",
      value: transformSalary(data.nextweekssalary)
    }
  ];
};

untransformPlayerData = function(d) {
  var name, value;
  name = {
    "G": "Goals",
    "A": "Assists",
    "2A": "2nd Assists",
    "3A": "3rd Assists",
    "4A": "4th Assists",
    "5A": "5th Assists",
    "D": "Defenses",
    "Comp.": "Completions",
    "TA": "Throw Aways",
    "TD": "Threw Drops",
    "Throwing %": "Throwing",
    "Catch": "Catches",
    "Drop": "Drops",
    "Catching %": "Catching",
    "PF": "Points for",
    "PA": "Points against",
    "Salary": "Salary",
    "New Salary": "New Salary"
  }[d.name];
  value = d.value;
  if (d.name === "Throwing %" || d.name === "Catching %") {
    value = (value * 10) + '%';
  }
  if (d.name === "Salary" || d.name === "New Salary") {
    value = '$' + (value * 50000.0).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }
  return {
    name: name,
    value: value
  };
};

Graph = (function() {
  function Graph() {
    this.margin = {
      top: 20,
      right: 30,
      bottom: 30,
      left: 40
    };
    this.width = 1080 - this.margin.left - this.margin.right;
    this.height = 500 - this.margin.top - this.margin.bottom;
    this.x0 = d3.scale.ordinal().rangeRoundBands([0, this.width], .1);
    this.x1 = d3.scale.ordinal();
    this.y = d3.scale.linear().range([this.height, 0]);
    this.klass = d3.scale.ordinal().range(["playerA", "playerB"]);
    this.xAxis = d3.svg.axis().scale(this.x0).orient("bottom");
    this.yAxis = d3.svg.axis().scale(this.y).orient("left");
    this.chart = d3.select(".chart").attr("width", this.width + this.margin.left + this.margin.right).attr("height", this.height + this.margin.top + this.margin.bottom).append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
  }

  Graph.prototype.graphPlayers = function(playerA, playerB) {
    if (this.chart.selectAll('*')[0].length === 0) {
      return this._initGraphPlayers(playerA, playerB);
    } else {
      return this._updateGraphPlayers(playerA, playerB);
    }
  };

  Graph.prototype._initGraphPlayers = function(playerA, playerB) {
    var data, i, playerAStat, playerBStat, stat, stats;
    data = [];
    i = 0;
    while (i < playerA.stats.length) {
      stat = playerA.stats[i].name;
      playerAStat = playerA.stats[i].value;
      playerBStat = playerB.stats[i].value;
      data.push({
        name: stat,
        playerA: playerAStat,
        playerB: playerBStat
      });
      i++;
    }
    this.y.domain([
      0, d3.max(data, function(d) {
        return Math.max(d.playerA, d.playerB);
      })
    ]);
    this.x0.domain(data.map(function(d) {
      return d.name;
    }));
    this.x1.domain(['playerA', 'playerB']).rangeRoundBands([0, this.x0.rangeBand()]);
    this.chart.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(this.xAxis);
    this.chart.append("g").attr("class", "y axis").call(this.yAxis);
    this.tip = d3.tip().attr('class', 'd3-tip').offset([-10, 0]).html(function(d) {
      var ud;
      ud = untransformPlayerData(d);
      return "<span class='" + d.player + "'> " + ud.name + ": " + ud.value + "</span>";
    });
    this.chart.call(this.tip);
    stats = this.chart.selectAll(".stat").data(data).enter().append("g").attr("class", "g").attr("transform", (function(_this) {
      return function(d) {
        return "translate(" + _this.x0(d.name) + ",0)";
      };
    })(this));
    return stats.selectAll("rect").data(function(d) {
      return [
        {
          player: 'playerA',
          name: d.name,
          value: d.playerA
        }, {
          player: 'playerB',
          name: d.name,
          value: d.playerB
        }
      ];
    }).enter().append("rect").attr("class", (function(_this) {
      return function(d) {
        return _this.klass(d.player);
      };
    })(this)).attr("width", this.x1.rangeBand()).attr("x", (function(_this) {
      return function(d) {
        return _this.x1(d.player);
      };
    })(this)).attr("y", this.height).attr("height", 0).on('mouseover', this.tip.show).on('mouseout', this.tip.hide).transition().duration(200).attr("y", (function(_this) {
      return function(d) {
        return _this.y(d.value);
      };
    })(this)).attr("height", (function(_this) {
      return function(d) {
        return _this.height - _this.y(d.value);
      };
    })(this));
  };

  Graph.prototype._updateGraphPlayers = function(playerA, playerB) {
    var data, i, playerAStat, playerBStat, stat;
    data = [];
    i = 0;
    while (i < playerA.stats.length) {
      stat = playerA.stats[i].name;
      playerAStat = playerA.stats[i].value;
      playerBStat = playerB.stats[i].value;
      data.push({
        name: stat,
        player: 'playerA',
        value: playerAStat
      });
      data.push({
        name: stat,
        player: 'playerB',
        value: playerBStat
      });
      i++;
    }
    this.y.domain([
      0, d3.max(data, (function(_this) {
        return function(d) {
          return d.value;
        };
      })(this))
    ]);
    return this.chart.selectAll("rect").data(data).transition().duration(200).attr("y", (function(_this) {
      return function(d) {
        return _this.y(d.value);
      };
    })(this)).attr("height", (function(_this) {
      return function(d) {
        return _this.height - _this.y(d.value);
      };
    })(this));
  };

  return Graph;

})();
